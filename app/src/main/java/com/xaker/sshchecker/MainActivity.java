package com.xaker.sshchecker;

import android.os.AsyncTask;
import android.os.Bundle;
import android.widget.*;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;
import com.google.android.material.navigation.NavigationView;
import com.jcraft.jsch.*;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;

public class MainActivity extends AppCompatActivity {

    private EditText ipInput;
    private Button checkButton;
    private ProgressBar progressBar;
    private TextView statusTextView, externalIpText;
    private ImageView statusIcon, menuButton;

    private DrawerLayout drawerLayout;
    private NavigationView navigationView;

    private final String sshHost = "192.168.1.1";
    private final String sshUser = "root";
    private final String[] sshPasswords = {"Admin0101", "Admin012"};

    private Session existingSession; // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è Ping

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        ipInput = findViewById(R.id.ipInput);
        ipInput.setText("192.168.43.61");
        checkButton = findViewById(R.id.checkButton);
        progressBar = findViewById(R.id.progressBar);
        statusTextView = findViewById(R.id.statusTextView);
        externalIpText = findViewById(R.id.externalIpText);
        statusIcon = findViewById(R.id.statusIcon);
        menuButton = findViewById(R.id.menu_button);

        drawerLayout = findViewById(R.id.drawer_layout);
        navigationView = findViewById(R.id.nav_view);

        menuButton.setOnClickListener(v -> drawerLayout.openDrawer(GravityCompat.START));
        navigationView.setNavigationItemSelectedListener(item -> {
            if (item.getItemId() == R.id.nav_help) {
                new androidx.appcompat.app.AlertDialog.Builder(this)
                        .setTitle("–°–ø—Ä–∞–≤–∫–∞")
                        .setMessage("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç:\n\n" +
                                "1. –ü–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ —Ä–æ—É—Ç–µ—Ä—É –ø–æ SSH.\n" +
                                "2. –ü—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å IP-–∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ SSH.\n" +
                                "3. –ü–æ–ª—É—á–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π IP —Ä–æ—É—Ç–µ—Ä–∞.\n\n" +
                                "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n" +
                                "- IP –≤–≤–æ–¥–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n" +
                                "- –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'.\n" +
                                "- –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –≤ –≤–∏–¥–µ ‚úÖ –∏–ª–∏ ‚ùå.")
                        .setPositiveButton("–û–ö", null)
                        .show();
            }
            drawerLayout.closeDrawers();
            return true;
        });

        new SSHConnectTask().execute();

        checkButton.setOnClickListener(v -> {
            if (existingSession != null && existingSession.isConnected()) {
                String ipToPing = ipInput.getText().toString().trim();
                // üü¢ –æ—á–∏—â–∞–µ–º IP: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏
                ipToPing = ipToPing.replaceAll("[^0-9.]", "");
                new PingSSHTask(existingSession).execute(ipToPing);
            } else {
                Toast.makeText(this, "SSH —Å–µ—Å—Å–∏—è –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞", Toast.LENGTH_SHORT).show();
            }
        });

    }

    // ================= SSH CONNECT TASK =================
    private class SSHConnectTask extends AsyncTask<Void, String, String> {

        @Override
        protected void onPreExecute() {
            statusTextView.setText("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–æ—É—Ç–µ—Ä—É...");
            progressBar.setVisibility(android.view.View.VISIBLE);
            statusIcon.setVisibility(android.view.View.GONE);
            externalIpText.setText("–í–Ω–µ—à–Ω–∏–π IP:");
        }

        @Override
        protected String doInBackground(Void... voids) {
            int maxRetries = 3;
            int attempt = 0;

            while (attempt < maxRetries) {
                attempt++;
                for (String password : sshPasswords) {
                    publishProgress("–ü–æ–ø—ã—Ç–∫–∞ " + attempt + " | –ü—Ä–æ–±—É–µ–º SSH –ø–∞—Ä–æ–ª—å: " + password);
                    try {
                        JSch jsch = new JSch();
                        Session session = jsch.getSession(sshUser, sshHost, 22);
                        session.setPassword(password);
                        session.setConfig("StrictHostKeyChecking", "no");
                        session.connect(5000);

                        existingSession = session; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è Ping

                        String ipResult = execCommand(session,
                                "ip addr show wwan0 | grep 'inet ' | awk '{print $2}' | cut -d/ -f1").trim();

                        if (ipResult.isEmpty()) {
                            ipResult = execCommand(session,
                                    "ip addr show | grep 'inet ' | awk '{print $2}' | cut -d/ -f1 | " +
                                            "grep -E '^(10\\.|192\\.168\\.|172\\.(1[6-9]|2[0-9]|3[01]))' | head -n 1").trim();
                        }

                        if (!ipResult.isEmpty()) {
                            return ipResult;
                        }

                    } catch (Exception e) {
                        if (attempt >= maxRetries) return "–û—à–∏–±–∫–∞ SSH: " + e.getMessage();
                    }
                }
            }
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP –ø–æ—Å–ª–µ " + maxRetries + " –ø–æ–ø—ã—Ç–æ–∫";
        }

        private String execCommand(Session session, String command) throws Exception {
            ChannelExec channel = (ChannelExec) session.openChannel("exec");
            channel.setCommand(command);
            channel.setInputStream(null);
            InputStream in = channel.getInputStream();
            channel.connect();

            byte[] tmp = new byte[1024];
            StringBuilder output = new StringBuilder();
            while (true) {
                while (in.available() > 0) {
                    int i = in.read(tmp, 0, 1024);
                    if (i < 0) break;
                    output.append(new String(tmp, 0, i));
                }
                if (channel.isClosed()) break;
                Thread.sleep(100);
            }
            channel.disconnect();
            return output.toString();
        }

        @Override
        protected void onProgressUpdate(String... values) {
            statusTextView.setText(values[0]);
        }

        @Override
        protected void onPostExecute(String result) {
            progressBar.setVisibility(android.view.View.GONE);
            if (!result.toLowerCase().contains("–æ—à–∏–±–∫–∞") && !result.contains("–ù–µ —É–¥–∞–ª–æ—Å—å")) {
                externalIpText.setText("–í–Ω–µ—à–Ω–∏–π IP —Ä–æ—É—Ç–µ—Ä–∞: " + result);
                statusIcon.setImageResource(R.drawable.ic_check);
            } else {
                statusTextView.setText(result);
                statusIcon.setImageResource(R.drawable.ic_cross);
            }
            statusIcon.setVisibility(android.view.View.VISIBLE);
        }
    }

    // ================= PING VIA SSH TASK =================
    private class PingSSHTask extends AsyncTask<String, Void, String> {

        private Session sshSession;
        private boolean success = false; // –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–∫–æ–π –∑–Ω–∞—á–æ–∫ –ø–æ–∫–∞–∑–∞—Ç—å

        public PingSSHTask(Session session) {
            this.sshSession = session;
        }

        @Override
        protected void onPreExecute() {
            statusTextView.setText("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (TCP ‚Üí ARP ‚Üí Route)...");
            progressBar.setVisibility(android.view.View.VISIBLE);
            statusIcon.setVisibility(android.view.View.GONE); // —Å–∫—Ä—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –ø–æ–∫–∞ –∏–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞
        }

        @Override
        protected String doInBackground(String... params) {
            if (sshSession == null || !sshSession.isConnected()) {
                return "–û—à–∏–±–∫–∞: SSH –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω";
            }

            String targetIp = params[0];
            try {
                long start, end;

                // 1. TCP-–ø–∏–Ω–≥ (–ø–æ—Ä—Ç 22 –∏–ª–∏ 80)
                start = System.currentTimeMillis();
                String tcpResult = execCommand(sshSession,
                        "nc -z -w2 " + targetIp + " 22 || nc -z -w2 " + targetIp + " 80 && echo OK || echo FAIL");
                end = System.currentTimeMillis();
                if (tcpResult.contains("OK")) {
                    success = true;
                    return "–ü–∏–Ω–≥ –ø—Ä–æ—à—ë–ª " + (end - start) + " –º—Å";
                }

                // 2. ARP-–ø–∏–Ω–≥
                start = System.currentTimeMillis();
                String arpResult = execCommand(sshSession,
                        "arp -n | grep " + targetIp + " | awk '{print $3}'");
                end = System.currentTimeMillis();
                if (!arpResult.trim().isEmpty()) {
                    success = true;
                    return "–ü–∏–Ω–≥ –ø—Ä–æ—à—ë–ª " + (end - start) + " –º—Å";
                }

                // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
                start = System.currentTimeMillis();
                String routeResult = execCommand(sshSession,
                        "ip route get " + targetIp + " | head -n 1");
                end = System.currentTimeMillis();
                if (routeResult.contains(targetIp)) {
                    success = true;
                    return "–ü–∏–Ω–≥ –ø—Ä–æ—à—ë–ª " + (end - start) + " –º—Å";
                }

                return "–£–∑–µ–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";

            } catch (Exception e) {
                e.printStackTrace();
                return "–û—à–∏–±–∫–∞: " + e.getMessage();
            }
        }

        private String execCommand(Session session, String command) throws Exception {
            ChannelExec channel = (ChannelExec) session.openChannel("exec");
            channel.setCommand(command);
            channel.setInputStream(null);
            InputStream in = channel.getInputStream();
            channel.connect();

            BufferedReader reader = new BufferedReader(new InputStreamReader(in));
            StringBuilder output = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }
            channel.disconnect();
            return output.toString();
        }

        @Override
        protected void onPostExecute(String result) {
            progressBar.setVisibility(android.view.View.GONE);
            statusTextView.setText(result);

            statusIcon.setVisibility(android.view.View.VISIBLE);
            if (success) {
                statusIcon.setImageResource(R.drawable.ic_check); // –∑–µ–ª—ë–Ω–∞—è –≥–∞–ª–æ—á–∫–∞
            } else {
                statusIcon.setImageResource(R.drawable.ic_cross); // –∫—Ä–∞—Å–Ω—ã–π –∫—Ä–µ—Å—Ç–∏–∫
            }
        }
    }









}
